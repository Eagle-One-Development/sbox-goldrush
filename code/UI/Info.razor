@using GoldRush.Weapons;

@namespace GoldRush

<root class="with-flex column-reverse with-gap with-shadow">
    <cell class="with-flex column with-center with-padding-large with-gap">
        <label class="with-subheader">@StateName</label>
        <label class="with-description">@StateDescription</label>
    </cell>
    <cell class="with-center with-padding-large with-gap">
        <label class="with-header">@Health</label>
        <i class="with-header with-icon">favorite</i>
    </cell>

    @{
        if ( Inventory == null ) return;
        int i = 0;
        foreach( var weapon in Inventory.Weapons )
        {
            i++;
            <cell class="with-center with-padding-large with-gap @(weapon == Weapon ? "active" : "")">
                <label class="with-subheader id">@i</label>
                <label class="with-subheader name">@weapon.Name</label>
                <!--show ammo for active weapon-->
                @if(weapon==Weapon) 
                {
                    @if(weapon.HasAmmo())
                    {
                        <div class="ammo">
                            <label class="with-subheader clip" text="@FormatClip()"/>
                            <label class="with-subheader reserve" text="/ @FormatReserve()"/>
                        </div>    
                    }
                }
            </cell>
        }
    }
</root>

@code 
{
    public string Health => $"{Player.Health.Clamp(0,9999):F0}";
    public Player Player => Game.LocalPawn as Player;
    public Weapon Weapon => Player?.ActiveWeapon;
    public Inventory Inventory => Player.Inventory;

    public string StateName => GameLoop.Current?.ActiveState?.DisplayInfo.Name ?? "";
    public string StateDescription => GameLoop.Current?.ActiveState?.StateDescription ?? "";

    private string FormatClip()
    {
        var clip = Weapon.GetAmmo();
        return $"{clip}";
    }

    private string FormatReserve()
    {
        var ammoType = Weapon.GetAmmoType();

        var reserve = Player.Ammo.GetAmmo(ammoType);
        return $"{reserve}";
    }

    protected override int BuildHash()
    {
        var hash = HashCode.Combine(Player?.Health, Weapon);

        if (Weapon.HasAmmo())
            hash = HashCode.Combine(hash, Weapon.GetAmmo(), Player.Ammo.GetAmmo(Weapon.GetAmmoType()));

        hash = HashCode.Combine(hash, StateName, StateDescription);

        return hash;
    }
}