@using GoldRush.Weapons;
@using Sandbox.Utility;

@namespace GoldRush
@inherits Panel

<root>
	<div class="image" style="transform: rotate( @Rotation ) scale( @Scale ); opacity: @Opacity;"></div>
</root>

@code {
	public float Scale { get; set; }
	public float Rotation { get; set; }
	public new float Opacity { get; set; }

	private TimeUntil _timeUntilDestroyed;
	private float _angle;
	private float _scale;

	private const float LifeTime = 0.2f;
	public Player Player => Game.LocalPawn as Player;

	public Hitmarker(bool isKill = false)
	{
		_timeUntilDestroyed = LifeTime;

		// We want the hitmarker's rotation to be based on an exaggerated form of the current view kick
		_angle = (Player?.ActiveWeapon?.ViewKick.pitch * 10f) ?? 0f;

		// We want the scale to differ slightly between hitmarker instances
		_scale = Game.Random.Float(0.5f, 1.0f);

		// Eliminations / kills have a slightly different effect
		SetClass("is-kill", isKill);
	}

	/// <summary>
	/// Returns a normalized, uniform representation of the hitmarker's lifetime, clamped between 0 and 1
	/// </summary>
	public float GetFraction(float multiplier = 1.0f)
	{
		return ((_timeUntilDestroyed / LifeTime) * multiplier).Clamp(0, 1);
	}

	public override void Tick()
	{
		//
		// Should this be deleted?
		//
		if (_timeUntilDestroyed <= 0)
			Delete(true);

		// Apply effects
		Rotation = Easing.BounceIn(GetFraction()) * _angle;
		Scale = 1.0f + (Easing.EaseOut(GetFraction(2.0f)) * _scale);
		Opacity = Easing.EaseOut(GetFraction(4.0f));
	}

	protected override int BuildHash()
	{
		return HashCode.Combine(Time.Now);
	}

	[ConCmd.Client("gr_add_hitmarker", CanBeCalledFromServer = true)]
	public static void AddHitmarker(bool isKill)
	{
		var hitmarker = new Hitmarker(isKill);
		Game.RootPanel.AddChild(hitmarker);
	}
}