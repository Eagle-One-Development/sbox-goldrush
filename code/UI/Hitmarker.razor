@using GoldRush.Weapons;
@using Sandbox.Utility;

@namespace GoldRush
@inherits Panel

<style>
	Hitmarker {
		position: absolute;
		left: 0;
		top: 0;
		right: 0;
		bottom: 0;
		align-items: center;
		justify-content: center;
		sound-in: hitmarker.hit;
		
	.image
	{
		width: 48px;
		height: 48px;
		aspect-ratio: 1;
		flex-grow: 0;
		background-image: url( ui/hitmarker.png );
		background-size: cover;
		mix-blend-mode: lighten;
	}

	}</style>

<root>
	<div class="image" style="transform: rotate( @Rotation ) scale( @Scale ); opacity: @Opacity;"></div>
</root>

@code {
	public float Scale { get; set; }
	public float Rotation { get; set; }
	public new float Opacity { get; set; }

	private TimeUntil _timeUntilDestroyed;
	private float _angle;
	private float _scale;

	private const float LifeTime = 0.2f;
	public Player Player => Game.LocalPawn as Player;

	public Hitmarker()
	{
		_timeUntilDestroyed = LifeTime;

		_angle = (Player?.ActiveWeapon?.ViewKick.pitch * 10f) ?? 0f;
		_scale = Game.Random.Float(0.5f, 1.0f);
	}

	public float GetFraction( float multiplier = 1.0f )
	{
		return (( _timeUntilDestroyed / LifeTime ) * multiplier).Clamp( 0, 1 );
	}

	public override void Tick()
	{
		float t = GetFraction();

		if (_timeUntilDestroyed <= 0)
			Delete(true);

		Rotation = Easing.BounceIn(GetFraction()) * _angle;
		Scale = 1.0f + (Easing.EaseOut(GetFraction( 2.0f )) * _scale);
		Opacity = Easing.EaseOut(GetFraction( 4.0f ));
	}

	protected override int BuildHash()
	{
		return HashCode.Combine(Time.Now);
	}

	[ConCmd.Client("gr_add_hitmarker", CanBeCalledFromServer = true)]
	public static void AddHitmarker()
	{
		Game.RootPanel.AddChild<Hitmarker>();
	}
}